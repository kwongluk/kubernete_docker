kubectl -n kube-ystem get pod -o wide
kubectl get pod -l k8s-app=kube-proxy -o wide
kubectl describe pod kube-proxy
/var/lib/kube-proxy/config.conf
kubectl get confmap kube-proxy -o yaml
kubectl create serviceaccount tiller --namespace kube-system
vi ~/tmp/rbac-confg.yaml
kubectl create -f  ~/tmp/rbac-confg.yaml
helm


download docker image from internet
-----------------------------------
docker pull ngnix
docker images

intractive mode
---------------
docker exec -it nginx-container /bin/bash   

expose port and run background
------------------------------
docker run -d -p 192.168.1.100:8080:80  --name nginix-container nginx 
docker stop nginix-container
docker rm nginix-container


Kubernete Cluster
-----------------
#sudo apt update
#sudo apt install docker.io -y
#sudo systemctl enable docker
#sudo systemctl status docker
#sudo systemctl start docker
#curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo tee /usr/share/keyrings/kubernetes.gpg
#echo "deb [arch=amd64 signed-by=/usr/share/keyrings/kubernetes.gpg] http://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee -a /etc/apt/sources.list
#sudo apt install kubeadm kubelet kubectl
#sudo apt-mark hold kubeadm kubelet kubectl
#kubeadm version
#sudo swapoff -a
#sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab
#sudo nano /etc/modules-load.d/containerd.conf
	overlay
	br_netfilter
#sudo modprobe overlay
#sudo modprobe br_netfilter
#sudo nano /etc/sysctl.d/kubernetes.conf
	net.bridge.bridge-nf-call-ip6tables = 1
	net.bridge.bridge-nf-call-iptables = 1
	net.ipv4.ip_forward = 1
#sudo sysctl --system
#sudo hostnamectl set-hostname master-node
#sudo hostnamectl set-hostname worker01
#sudo nano /etc/default/kubelet
	KUBELET_EXTRA_ARGS="--cgroup-driver=cgroupfs"
#systemctl daemon-reload
#systemctl restart kubelet
#sudo nano /etc/docker/daemon.json
	{
      "exec-opts": ["native.cgroupdriver=systemd"],
      "log-driver": "json-file",
      "log-opts": {
      "max-size": "100m"
   },
       "storage-driver": "overlay2"
       }

#systemctl daemon-reload
#systemctl restart docker
#sudo nano /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
	Environment="KUBELET_EXTRA_ARGS=--fail-swap-on=false"
#systemctl daemon-reload
#systemctl restart kubelet

kubeadm init --pod-network-cidr=10.244.0.0/16


#sudo kubeadm init --control-plane-endpoint=[master-hostname] --upload-certs
#mkdir -p $HOME/.kube
#sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
#sudo chown $(id -u):$(id -g) $HOME/.kube/config
#kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml
#kubectl taint nodes --all node-role.kubernetes.io/control-plane-

Step 5: Join Worker Node to Cluster
#systemctl stop apparmor
#sudo systemctl disable apparmor
#systemctl restart containerd.service
#kubeadm join [master-node-ip]:6443 --token abcdef.1234567890abcdef --discovery-token-ca-cert-hash sha256:1234..cdef
#kubectl get nodes


Single node kubernetes deploymnet
---------------------------------
minikube
apt-get update
curl -Lo  xxxxxxxxxxxxx
mv minikube* /usr/local/bin/
minikube start
kubectl get pods --all-namespaces
vi nginx.yaml
kubectl create -f nginx.yaml

